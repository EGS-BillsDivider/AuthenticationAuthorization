#Create secret for database
---
apiVersion: v1
kind: Secret
metadata:
  name: authdb-secrets
  namespace: egs1
type: Opaque
data:
  dbauth_user: bWlndWVs
  dbauth_password: bWlndWVs
# Create mongo persistent claim
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: auth-pvc
  namespace: egs1
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 500Mi
# Create database deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: bdbd-mongo
  namespace: egs1
spec:
  selector:
    matchLabels:
      app: bdbd-mongo
  template:
    metadata:
      labels:
        app: bdbd-mongo
    spec:
      containers:
      - name: mongo
        ## esta imagem em espec√≠fico tem de ser enviada para o registry
        image: registry.deti:5000/billsdivider/bdbd-mongo:16062022
        env:
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: authdb-secrets
              key: dbauth_password
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: authdb-secrets
              key: dbauth_user
        ports:
        - containerPort: 27017
          name: mongo
        volumeMounts:
          - name: mongo-persistent-storage
            mountPath: /var/lib/mongodb
      volumes:
        - name: mongo-persistent-storage
          persistentVolumeClaim:
            claimName: auth-pvc

# Create api deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: egs1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: api
  template:
    metadata:
      labels:
        app: api
    spec:
      containers:
      - name: api
        image: registry.deti:5000/billsdivider/bdapi:06072022 
        ports:
          - containerPort: 3000

# Create nginx deployment
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: egs1
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  strategy: {}
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - image: registry.deti:5000/billsdivider/nginx-proxy-bdapi:16062022 
          name: nginx
          ports:
            - containerPort: 80
          resources: {}
      restartPolicy: Always

# Creat database service
---
apiVersion: v1
kind: Service
metadata:
  name: bdbd-mongo
  namespace: egs1
spec:
  ports:
  - port: 27017
    protocol: TCP
    name: bdbd-mongo
  selector:
    app: bdbd-mongo
  type: NodePort

# Create api service
---
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: egs1
spec:
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: api

# Create nginx service
---
apiVersion: v1
kind: Service
metadata:
  name: nginx
  namespace: egs1
spec:
  ports:
  - port: 80
    targetPort: 80
  selector:
    app: nginx

# Configure Traefik ingress
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: auth-webapp-k3s
  namespace: egs1
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/frontend-entry-points: http,https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
    traefik.ingress.kubernetes.io/redirect-permanent: "true"
spec:
  rules:
  - host: auth.billsdivider.egs
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx
            port: 
              number: 80